K-En Yakın Komşu (KNN), sınıflandırma ve regresyon problemlerini çözmek için kullanılan basit ve temel bir denetimli öğrenme algoritmasıdır.
KNN algoritması, bir veri noktasını sınıflandırmak veya bir değer tahmin etmek için çevresindeki K en yakın komşusunun etiketlerine veya değerlerine dayanır. 
Temel fikir, bir noktanın etiketinin veya değerinin, o noktaya en yakın olan K komşusunun etiketlerinin veya değerlerinin ortalaması veya çoğunluğu olacağıdır.
KNN Algoritması

    Eğitim: KNN algoritması, eğitim veri setini sadece depolar, çünkü önceden eğitilmiş bir model oluşturmaz. Eğitim aşamasında, algoritma sadece veri noktalarını hafızasında saklar.

    Tahmin: Bir tahmin yapmak istendiğinde, algoritma önce tahmin edilen noktanın çevresindeki en yakın K komşuyu bulur.
Daha sonra, sınıflandırma için, bu K komşunun etiketlerinin veya regresyon için, bu K komşunun değerlerinin ortalamasını veya çoğunluğunu kullanarak tahmin yapar.

    K Değeri Seçimi: KNN'de K parametresi, komşuların sayısını belirler. K değeri seçimi, modelin performansını ve genelleme yeteneğini önemli ölçüde etkileyebilir.
Küçük bir K değeri, modelin eğitim verisine daha fazla uymasını sağlar, ancak aşırı uydurma riskini artırabilir. Büyük bir K değeri ise daha düzgün bir sınıflandırma yapabilir, ancak esnekliği azaltabilir.

Avantajlar

    Basit ve anlaşılması kolaydır.
    Eğitim süresi yoktur, çünkü algoritma sadece veri noktalarını saklar.
    Sınıflandırma ve regresyon problemleri için kullanılabilir.
    Çoklu sınıflandırma ve çoklu çıkışlı regresyon problemlerini çözebilir.

Dezavantajlar

    Tahmin yapmak için tüm eğitim veri setini saklar, bu da bellek kullanımını artırabilir.
    Büyük boyutlu veri setlerinde yavaş çalışabilir.
    Optimal K değerini belirlemek zor olabilir.
    Veri setindeki gürültüye ve gereksiz özelliklere hassastır.

Örnek Uygulama: KNN ile İris Veri Seti Sınıflandırması

"Iris" veri setindeki çiçek türlerini belirlemek için KNN algoritmasını kullanacağız.

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report

# Veri setini yükle
iris = load_iris()
X = iris.data
y = iris.target

# Veriyi eğitim ve test olarak böl
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Modeli oluştur ve eğit
model = KNeighborsClassifier(n_neighbors=3)  # K=3 seçildi
model.fit(X_train, y_train)

# Test verileri üzerinde tahmin yap
y_pred = model.predict(X_test)

# Doğruluk skorunu hesapla
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Sınıflandırma raporunu yazdır
print("Classification Report:")
print(classification_report(y_test, y_pred))

Bu örnekte, "Iris" veri setini kullanarak bir KNN modeli oluşturuyoruz. Modeli eğittikten sonra test verileri üzerinde tahminler yaparız ve doğruluk skoru ile sınıflandırma raporunu görüntüleriz.
