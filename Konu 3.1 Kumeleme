Kümeleme, bir veri kümesindeki benzer özelliklere sahip veri noktalarını gruplara ayırma işlemidir.
Amacı, veri noktalarını homojen alt kümelerde toplamak ve bu grupları oluştururken birbirinden farklılıkları maksimum seviyede azaltmaktır.
Kümeleme, veri keşfi, veri azaltma, pazar segmentasyonu, sosyal ağ analizi, biyoinformatik ve daha birçok alanda kullanılır.
Kümeleme Türleri

    Hierarchical (Hiyerarşik) Kümeleme: Bu yöntem, her veri noktasını bir küme olarak başlatır ve daha sonra benzer kümeleme yöntemleri aracılığıyla birleştirir veya böler.
Bu yöntemde, her bir veri noktası ve kümeleme işlemi bir ağaç yapısı içinde temsil edilir.

    Partitional (Bölümsel) Kümeleme: Bu yöntem, veri kümesini önceden belirlenmiş bir sayıda küme veya bölüme ayırır. 
Veri noktaları, kümelere atanır ve her bir küme, belirli bir kriteri (genellikle uzaklık ölçüsü) en uygun şekilde optimize etmek için yeniden düzenlenir.

    Density-Based (Yoğunluk Temelli) Kümeleme: Bu yöntem, veri noktalarını birbiriyle yoğunluğa dayalı olarak gruplar. 
Bir noktanın yoğunluğu, belirli bir çekim alanındaki diğer noktaların sayısına dayanır. Bu yöntem, küme şekillerinin daha esnek olmasını sağlar.

    Grid-Based (Izgara Temelli) Kümeleme: Bu yöntem, veri uzayını bir ızgara şeklinde böler ve her bir hücreyi bir küme olarak kabul eder. 
Bu yöntem, veri kümesinin boyutunu ve boyutunu dikkate alır ve bu nedenle büyük veri kümeleri için etkilidir.

Kümeleme Uygulamaları

Pazar Segmentasyonu: Bir şirketin müşteri tabanını farklı pazar segmentlerine ayırarak, her segment için özelleştirilmiş pazarlama stratejileri geliştirmesi.

Görüntü Tanıma: Benzer özelliklere sahip pikselleri bir araya getirerek, görüntüdeki nesneleri ve desenleri tanımlamak.

Sosyal Ağ Analizi: Sosyal medya verilerini analiz ederek, kullanıcıları belirli gruplara veya topluluklara atama.
Örnek Uygulama: K-Means Kümeleme

K-Means kümeleme, en yaygın kullanılan partitional kümeleme yöntemlerinden biridir. Bu yöntem, veri kümesini belirli bir sayıda küme veya kategoriye böler. 
İşlem, belirlenen küme sayısına göre başlangıçta rasgele yerleştirilen küme merkezlerinden başlar. 
Ardından, her veri noktası en yakın küme merkezine atanır ve küme merkezleri, veri noktalarının ortalama konumuna göre güncellenir. 
Bu süreç, küme merkezleri sabitlenene veya belirli bir iterasyon sayısına ulaşılana kadar tekrarlanır.

from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt

# Sentetik veri seti oluştur
X, _ = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0)

# Modeli oluştur ve eğit
kmeans = KMeans(n_clusters=4)
kmeans.fit(X)

# Küme merkezlerini ve kümeleme sonuçlarını al
centers = kmeans.cluster_centers_
labels = kmeans.labels_

# Kümeleme sonuçlarını görselleştir
plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
plt.scatter(centers[:, 0], centers[:, 1], marker='*', s=300, c='red', label='Centroids')
plt.legend()
plt.show()

Bu örnekte, make_blobs() fonksiyonuyla birlikte rastgele veri noktaları oluşturulur ve KMeans algoritması kullanılarak bu veri noktaları dört küme arasında kümeleştirilir. 
Küme merkezleri ve kümeleme sonuçları, görselleştirilir.
